#!/bin/bash

# This shell script runs the test program on a small problem size
# - small enough for you to run a lot of experiments

NINS=1000
NQS=$NINS
SIZE=$NINS
DELTA=3

/homes/phjk/simplesim-wattch/sim-outorder $SSFLAGS ./splaytest.ss 3 $NINS $NQS $SIZE $DELTA

# cal120@texel33:SplayTrees$ ./run-wattch
# sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
# Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
# All Rights Reserved. This version of SimpleScalar is licensed for academic
# non-commercial use.  No portion of this work may be used by any commercial
# entity, or for any commercial purpose, without the prior written permission
# of SimpleScalar, LLC (info@simplescalar.com).


# Cache Parameters:
#   Size in bytes: 16384
#   Number of sets: 512
#   Associativity: 4
#   Block Size (bytes): 8

# Access Time: 9.27925e-09
# Cycle Time:  1.09081e-08

# Best Ndwl (L1): 8
# Best Ndbl (L1): 1
# Best Nspd (L1): 1
# Best Ntwl (L1): 1
# Best Ntbl (L1): 4
# Best Ntspd (L1): 1

# Time Components:
#  data side (with Output driver) (ns): 8.44162
#  tag side (ns): 8.55667
#  decode_data (ns): 5.29318
#  wordline_data (ns): 1.03507
#  bitline_data (ns): 0.810785
#  sense_amp_data (ns): 0.58
#  decode_tag (ns): 2.37065
#  wordline_tag (ns): 1.36749
#  bitline_tag (ns): 0.158246
#  sense_amp_tag (ns): 0.26
#  compare (ns): 2.42991
#  mux driver (ns): 1.6125
#  sel inverter (ns): 0.357877
#  data output driver (ns): 0.722579
#  total data path (with output driver) (ns): 7.71904
#  total tag path is set assoc (ns): 8.55667
#  precharge time (ns): 1.6289

# Cache Parameters:
#   Size in bytes: 16384
#   Number of sets: 512
#   Associativity: 1
#   Block Size (bytes): 32

# Access Time: 6.15176e-09
# Cycle Time:  8.05494e-09

# Best Ndwl (L1): 2
# Best Ndbl (L1): 4
# Best Nspd (L1): 1
# Best Ntwl (L1): 1
# Best Ntbl (L1): 2
# Best Ntspd (L1): 2

# Time Components:
#  data side (with Output driver) (ns): 6.14931
#  tag side (ns): 6.15176
#  decode_data (ns): 3.35254
#  wordline_data (ns): 1.30935
#  bitline_data (ns): 0.184839
#  sense_amp_data (ns): 0.58
#  decode_tag (ns): 1.84499
#  wordline_tag (ns): 0.847457
#  bitline_tag (ns): 0.250732
#  sense_amp_tag (ns): 0.26
#  compare (ns): 2.36506
#  valid signal driver (ns): 0.583518
#  data output driver (ns): 0.722579
#  total data path (with output driver) (ns): 5.42673
#  total tag path is dm (ns): 6.15176
#  precharge time (ns): 1.90318

# Cache Parameters:
#   Size in bytes: 16384
#   Number of sets: 128
#   Associativity: 4
#   Block Size (bytes): 32

# Access Time: 9.14093e-09
# Cycle Time:  1.11718e-08

# Best Ndwl (L1): 4
# Best Ndbl (L1): 2
# Best Nspd (L1): 1
# Best Ntwl (L1): 1
# Best Ntbl (L1): 2
# Best Ntspd (L1): 1

# Time Components:
#  data side (with Output driver) (ns): 6.05114
#  tag side (ns): 7.98848
#  decode_data (ns): 2.92572
#  wordline_data (ns): 1.437
#  bitline_data (ns): -0.0440331
#  sense_amp_data (ns): 0.58
#  decode_tag (ns): 1.46851
#  wordline_tag (ns): 1.27791
#  bitline_tag (ns): -0.0315811
#  sense_amp_tag (ns): 0.26
#  compare (ns): 2.29478
#  mux driver (ns): 2.37376
#  sel inverter (ns): 0.345094
#  data output driver (ns): 1.15245
#  total data path (with output driver) (ns): 4.89869
#  total tag path is set assoc (ns): 7.98848
#  precharge time (ns): 2.03083

# Cache Parameters:
#   Size in bytes: 262144
#   Number of sets: 1024
#   Associativity: 4
#   Block Size (bytes): 64

# Access Time: 1.44948e-08
# Cycle Time:  1.76863e-08

# Best Ndwl (L1): 2
# Best Ndbl (L1): 2
# Best Nspd (L1): 1
# Best Ntwl (L1): 1
# Best Ntbl (L1): 4
# Best Ntspd (L1): 1

# Time Components:
#  data side (with Output driver) (ns): 11.3269
#  tag side (ns): 12.2049
#  decode_data (ns): 4.99158
#  wordline_data (ns): 2.59771
#  bitline_data (ns): 0.867749
#  sense_amp_data (ns): 0.58
#  decode_tag (ns): 4.52586
#  wordline_tag (ns): 1.24192
#  bitline_tag (ns): 0.46158
#  sense_amp_tag (ns): 0.26
#  compare (ns): 2.17054
#  mux driver (ns): 3.21212
#  sel inverter (ns): 0.332908
#  data output driver (ns): 2.28987
#  total data path (with output driver) (ns): 9.03704
#  total tag path is set assoc (ns): 12.2049
#  precharge time (ns): 3.19154

# Processor Parameters:
# Issue Width: 4
# Window Size: 16
# Number of Virtual Registers: 32
# Number of Physical Registers: 16
# Datapath Width: 64
# Total Power Consumption: 74.2558
# Branch Predictor Power Consumption: 4.52313  (6.26%)
#  branch target buffer power (W): 4.16837
#  local predict power (W): 0.0879711
#  global predict power (W): 0.0996078
#  chooser power (W): 0.0702439
#  RAS power (W): 0.0969383
# Rename Logic Power Consumption: 0.417965  (0.578%)
#  Instruction Decode Power (W): 0.0159915
#  RAT decode_power (W): 0.113514
#  RAT wordline_power (W): 0.0307815
#  RAT bitline_power (W): 0.246771
#  DCL Comparators (W): 0.0109075
# Instruction Window Power Consumption: 2.20432  (3.05%)
#  tagdrive (W): 0.0943488
#  tagmatch (W): 0.033695
#  Selection Logic (W): 0.0134217
#  decode_power (W): 0.0532503
#  wordline_power (W): 0.0844643
#  bitline_power (W): 1.92514
# Load/Store Queue Power Consumption: 0.96318  (1.33%)
#  tagdrive (W): 0.457232
#  tagmatch (W): 0.100774
#  decode_power (W): 0.00799577
#  wordline_power (W): 0.0150119
#  bitline_power (W): 0.382166
# Arch. Register File Power Consumption: 3.57247  (4.94%)
#  decode_power (W): 0.113514
#  wordline_power (W): 0.0844643
#  bitline_power (W): 3.37449
# Result Bus Power Consumption: 2.29754  (3.18%)
# Total Clock Power: 26.1412  (36.2%)
# Int ALU Power: 4.66013  (6.45%)
# FP ALU Power: 14.281  (19.8%)
# Instruction Cache Power Consumption: 2.55583  (3.54%)
#  decode_power (W): 0.724888
#  wordline_power (W): 0.057312
#  bitline_power (W): 1.14691
#  senseamp_power (W): 0.192
#  tagarray_power (W): 0.434717
# Itlb_power (W): 0.27086 (0.375%)
# Data Cache Power Consumption: 5.21484  (7.22%)
#  decode_power (W): 0.651055
#  wordline_power (W): 0.196735
#  bitline_power (W): 2.71235
#  senseamp_power (W): 0.768
#  tagarray_power (W): 0.8867
# Dtlb_power (W): 0.927016 (1.28%)
# Level 2 Cache Power Consumption: 4.22625 (5.85%)
#  decode_power (W): 0.41817
#  wordline_power (W): 0.0430878
#  bitline_power (W): 3.0244
#  senseamp_power (W): 0.192
#  tagarray_power (W): 0.548589
# sim: command line: /homes/phjk/simplesim-wattch/sim-outorder ./splaytest.ss 3 100000 100000 100000 3 

# sim: simulation started @ Tue Nov  7 13:00:29 2023, options follow:

# sim-outorder: This simulator implements a very detailed out-of-order issue
# superscalar processor with a two-level memory system and speculative
# execution support.  This simulator is a performance simulator, tracking the
# latency of all pipeline operations.

# # -config                     # load configuration from a file
# # -dumpconfig                 # dump configuration to a file
# # -h                    false # print help message    
# # -v                    false # verbose operation     
# # -d                    false # enable debug message  
# # -i                    false # start in Dlite debugger
# -seed                       1 # random number generator seed (0 for timer seed)
# # -q                    false # initialize and terminate immediately
# # -chkpt               <null> # restore EIO trace execution from <fname>
# # -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# # -redir:prog          <null> # redirect simulated program output to file
# -nice                       0 # simulator scheduling priority
# -max:inst                   0 # maximum number of inst's to execute
# -fastfwd                    0 # number of insts skipped before timing starts
# # -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
# -fetch:ifqsize              4 # instruction fetch queue size (in insts)
# -fetch:mplat                3 # extra branch mis-prediction latency
# -fetch:speed                1 # speed of front-end of machine relative to execution core
# -bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
# -bpred:bimod     2048 # bimodal predictor config (<table size>)
# -bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
# -bpred:comb      1024 # combining predictor config (<meta_table_size>)
# -bpred:ras                  8 # return address stack size (0 for no return stack)
# -bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# # -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
# -decode:width               4 # instruction decode B/W (insts/cycle)
# -issue:width                4 # instruction issue B/W (insts/cycle)
# -issue:inorder          false # run pipeline with in-order issue
# -issue:wrongpath         true # issue instructions down wrong execution paths
# -commit:width               4 # instruction commit B/W (insts/cycle)
# -ruu:size                  16 # register update unit (RUU) size
# -lsq:size                   8 # load/store queue (LSQ) size
# -cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
# -cache:dl1lat               1 # l1 data cache hit latency (in cycles)
# -cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
# -cache:dl2lat               6 # l2 data cache hit latency (in cycles)
# -cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
# -cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
# -cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
# -cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
# -cache:flush            false # flush caches on system calls
# -cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
# -mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
# -mem:width                  8 # memory access bus width (in bytes)
# -tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
# -tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
# -tlb:lat                   30 # inst/data TLB miss latency (in cycles)
# -res:ialu                   4 # total number of integer ALU's available
# -res:imult                  1 # total number of integer multiplier/dividers available
# -res:memport                2 # total number of memory system ports available (to CPU)
# -res:fpalu                  4 # total number of floating point ALU's available
# -res:fpmult                 1 # total number of floating point multiplier/dividers available
# # -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
# -bugcompat              false # operate in backward-compatible bugs mode (for testing only)

#   Pipetrace range arguments are formatted as follows:

#     {{@|#}<start>}:{{@|#|+}<end>}

#   Both ends of the range are optional, if neither are specified, the entire
#   execution is traced.  Ranges that start with a `@' designate an address
#   range to be traced, those that start with an `#' designate a cycle count
#   range.  All other range values represent an instruction count range.  The
#   second argument, if specified with a `+', indicates a value relative
#   to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
#   be used in all contexts.

#     Examples:   -ptrace FOO.trc #0:#1000
#                 -ptrace BAR.trc @2000:
#                 -ptrace BLAH.trc :1500
#                 -ptrace UXXE.trc :
#                 -ptrace FOOBAR.trc @main:+278

#   Branch predictor configuration examples for 2-level predictor:
#     Configurations:   N, M, W, X
#       N   # entries in first level (# of shift register(s))
#       W   width of shift register(s)
#       M   # entries in 2nd level (# of counters, or other FSM)
#       X   (yes-1/no-0) xor history and address for 2nd level index
#     Sample predictors:
#       GAg     : 1, W, 2^W, 0
#       GAp     : 1, W, M (M > 2^W), 0
#       PAg     : N, W, 2^W, 0
#       PAp     : N, W, M (M == 2^(N+W)), 0
#       gshare  : 1, W, 2^W, 1
#   Predictor `comb' combines a bimodal and a 2-level predictor.

#   The cache config parameter <config> has the following format:

#     <name>:<nsets>:<bsize>:<assoc>:<repl>

#     <name>   - name of the cache being defined
#     <nsets>  - number of sets in the cache
#     <bsize>  - block size of the cache
#     <assoc>  - associativity of the cache
#     <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

#     Examples:   -cache:dl1 dl1:4096:32:1:l
#                 -dtlb dtlb:128:4096:32:r

#   Cache levels can be unified by pointing a level of the instruction cache
#   hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
#   configuration arguments.  Most sensible combinations are supported, e.g.,

#     A unified l2 p cache (il2 is pointed at dl2):
#       -cache:il1 il1:128:64:1:l -cache:il2 dl2
#       -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

#     Or, a fully unified cache hierarchy (il1 pointed at dl1):
#       -cache:il1 dl1
#       -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



# sim: ** starting performance simulation **
# Performing 100000 insertions with keys generated by random walk
# Insertions: 15689117 microseconds
# Performing 100000 queries
# Queries: 12094156 microseconds, 120.941560 microseconds/query
# number_of_matches = 100000

# sim: ** simulation statistics **
# sim_num_insn               37742064 # total number of instructions committed
# sim_num_refs               16002519 # total number of loads and stores committed
# sim_num_loads               9820395 # total number of loads committed
# sim_num_stores         6182124.0000 # total number of stores committed
# sim_num_branches            8592783 # total number of branches committed
# sim_elapsed_time                 28 # total simulation time in seconds
# sim_inst_rate          1347930.8571 # simulation speed (in insts/sec)
# sim_total_insn             43082909 # total number of instructions executed
# sim_total_refs             18051752 # total number of loads and stores executed
# sim_total_loads            11294375 # total number of loads executed
# sim_total_stores       6757377.0000 # total number of stores executed
# sim_total_branches         10142091 # total number of branches executed
# sim_cycle                  28885326 # total simulation time in cycles
# sim_IPC                      1.3066 # instructions per cycle
# sim_CPI                      0.7653 # cycles per instruction
# sim_exec_BW                  1.4915 # total instructions (mis-spec + committed) per cycle
# sim_IPB                      4.3923 # instruction per branch
# IFQ_count                  92965946 # cumulative IFQ occupancy
# IFQ_fcount                 20457714 # cumulative IFQ full count
# ifq_occupancy                3.2184 # avg IFQ occupancy (insn's)
# ifq_rate                     1.4915 # avg IFQ dispatch rate (insn/cycle)
# ifq_latency                  2.1578 # avg IFQ occupant latency (cycle's)
# ifq_full                     0.7082 # fraction of time (cycle's) IFQ was full
# RUU_count                 339066827 # cumulative RUU occupancy
# RUU_fcount                 10973231 # cumulative RUU full count
# ruu_occupancy               11.7384 # avg RUU occupancy (insn's)
# ruu_rate                     1.4915 # avg RUU dispatch rate (insn/cycle)
# ruu_latency                  7.8701 # avg RUU occupant latency (cycle's)
# ruu_full                     0.3799 # fraction of time (cycle's) RUU was full
# LSQ_count                 105616138 # cumulative LSQ occupancy
# LSQ_fcount                  5285486 # cumulative LSQ full count
# lsq_occupancy                3.6564 # avg LSQ occupancy (insn's)
# lsq_rate                     1.4915 # avg LSQ dispatch rate (insn/cycle)
# lsq_latency                  2.4515 # avg LSQ occupant latency (cycle's)
# lsq_full                     0.1830 # fraction of time (cycle's) LSQ was full
# sim_slip                  480546804 # total number of slip cycles
# avg_sim_slip                12.7324 # the average slip between issue and retirement
# bpred_bimod.lookups        10432872 # total number of bpred lookups
# bpred_bimod.updates         8592783 # total number of updates
# bpred_bimod.addr_hits       7886600 # total number of address-predicted hits
# bpred_bimod.dir_hits        7890230 # total number of direction-predicted hits (includes addr-hits)
# bpred_bimod.misses           702553 # total number of misses
# bpred_bimod.jr_hits          965469 # total number of address-predicted hits for JR's
# bpred_bimod.jr_seen          968755 # total number of JR's seen
# bpred_bimod.jr_non_ras_hits.PP            1 # total number of address-predicted hits for non-RAS JR's
# bpred_bimod.jr_non_ras_seen.PP            9 # total number of non-RAS JR's seen
# bpred_bimod.bpred_addr_rate    0.9178 # branch address-prediction rate (i.e., addr-hits/updates)
# bpred_bimod.bpred_dir_rate    0.9182 # branch direction-prediction rate (i.e., all-hits/updates)
# bpred_bimod.bpred_jr_rate    0.9966 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
# bpred_bimod.bpred_jr_non_ras_rate.PP    0.1111 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
# bpred_bimod.retstack_pushes      1159323 # total number of address pushed onto ret-addr stack
# bpred_bimod.retstack_pops      1001957 # total number of address popped off of ret-addr stack
# bpred_bimod.used_ras.PP       968746 # total number of RAS predictions used
# bpred_bimod.ras_hits.PP       965468 # total number of RAS hits
# bpred_bimod.ras_rate.PP    0.9966 # RAS prediction rate (i.e., RAS hits/used RAS)
# il1.accesses               45430596 # total number of accesses
# il1.hits                   45426445 # total number of hits
# il1.misses                     4151 # total number of misses
# il1.replacements               3657 # total number of replacements
# il1.writebacks                    0 # total number of writebacks
# il1.invalidations                 0 # total number of invalidations
# il1.miss_rate                0.0001 # miss rate (i.e., misses/ref)
# il1.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
# il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
# il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
# dl1.accesses               16015689 # total number of accesses
# dl1.hits                   16013720 # total number of hits
# dl1.misses                     1969 # total number of misses
# dl1.replacements               1457 # total number of replacements
# dl1.writebacks                 1432 # total number of writebacks
# dl1.invalidations                 0 # total number of invalidations
# dl1.miss_rate                0.0001 # miss rate (i.e., misses/ref)
# dl1.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
# dl1.wb_rate                  0.0001 # writeback rate (i.e., wrbks/ref)
# dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
# ul2.accesses                   7552 # total number of accesses
# ul2.hits                       6109 # total number of hits
# ul2.misses                     1443 # total number of misses
# ul2.replacements                  0 # total number of replacements
# ul2.writebacks                    0 # total number of writebacks
# ul2.invalidations                 0 # total number of invalidations
# ul2.miss_rate                0.1911 # miss rate (i.e., misses/ref)
# ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
# ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
# ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
# itlb.accesses              45430596 # total number of accesses
# itlb.hits                  45430575 # total number of hits
# itlb.misses                      21 # total number of misses
# itlb.replacements                 0 # total number of replacements
# itlb.writebacks                   0 # total number of writebacks
# itlb.invalidations                0 # total number of invalidations
# itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
# itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
# itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
# itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
# dtlb.accesses              16316736 # total number of accesses
# dtlb.hits                  16316720 # total number of hits
# dtlb.misses                      16 # total number of misses
# dtlb.replacements                 0 # total number of replacements
# dtlb.writebacks                   0 # total number of writebacks
# dtlb.invalidations                0 # total number of invalidations
# dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
# dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
# dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
# dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
# rename_power           12073069.3394 # total power usage of rename unit
# bpred_power            130651980.4392 # total power usage of bpred unit
# window_power           63672484.9932 # total power usage of instruction window
# lsq_power              27821767.9251 # total power usage of load/store queue
# regfile_power          103192021.4225 # total power usage of arch. regfile
# icache_power           81649885.9604 # total power usage of icache
# dcache_power           177409597.5734 # total power usage of dcache
# dcache2_power          122076634.2238 # total power usage of dcache2
# alu_power              547122026.3197 # total power usage of alu
# falu_power             412512639.1514 # total power usage of falu
# resultbus_power        66365275.2716 # total power usage of resultbus
# clock_power            755098046.7077 # total power usage of clock
# avg_rename_power             0.4180 # avg power usage of rename unit
# avg_bpred_power              4.5231 # avg power usage of bpred unit
# avg_window_power             2.2043 # avg power usage of instruction window
# avg_lsq_power                0.9632 # avg power usage of lsq
# avg_regfile_power            3.5725 # avg power usage of arch. regfile
# avg_icache_power             2.8267 # avg power usage of icache
# avg_dcache_power             6.1419 # avg power usage of dcache
# avg_dcache2_power            4.2263 # avg power usage of dcache2
# avg_alu_power               18.9412 # avg power usage of alu
# avg_falu_power              14.2810 # avg power usage of falu
# avg_resultbus_power          2.2975 # avg power usage of resultbus
# avg_clock_power             26.1412 # avg power usage of clock
# fetch_stage_power      212301866.3996 # total power usage of fetch stage
# dispatch_stage_power   12073069.3394 # total power usage of dispatch stage
# issue_stage_power      1004467786.3069 # total power usage of issue stage
# avg_fetch_power              7.3498 # average power of fetch unit per cycle
# avg_dispatch_power           0.4180 # average power of dispatch unit per cycle
# avg_issue_power             34.7743 # average power of issue unit per cycle
# total_power            2087132790.1761 # total power per cycle
# avg_total_power_cycle       72.2558 # average total power per cycle
# avg_total_power_cycle_nofp_nod2      53.7485 # average total power per cycle
# avg_total_power_insn        48.4446 # average total power per insn
# avg_total_power_insn_nofp_nod2      36.0362 # average total power per insn
# rename_power_cc1       7164214.3304 # total power usage of rename unit_cc1
# bpred_power_cc1        29028038.8740 # total power usage of bpred unit_cc1
# window_power_cc1       43918386.2615 # total power usage of instruction window_cc1
# lsq_power_cc1          5461620.3306 # total power usage of lsq_cc1
# regfile_power_cc1      57496092.3990 # total power usage of arch. regfile_cc1
# icache_power_cc1       50999475.2832 # total power usage of icache_cc1
# dcache_power_cc1       63185810.9694 # total power usage of dcache_cc1
# dcache2_power_cc1        25835.0716 # total power usage of dcache2_cc1
# alu_power_cc1          78526615.5640 # total power usage of alu_cc1
# resultbus_power_cc1    41141733.1021 # total power usage of resultbus_cc1
# clock_power_cc1        240240559.0816 # total power usage of clock_cc1
# avg_rename_power_cc1         0.2480 # avg power usage of rename unit_cc1
# avg_bpred_power_cc1          1.0049 # avg power usage of bpred unit_cc1
# avg_window_power_cc1         1.5204 # avg power usage of instruction window_cc1
# avg_lsq_power_cc1            0.1891 # avg power usage of lsq_cc1
# avg_regfile_power_cc1        1.9905 # avg power usage of arch. regfile_cc1
# avg_icache_power_cc1         1.7656 # avg power usage of icache_cc1
# avg_dcache_power_cc1         2.1875 # avg power usage of dcache_cc1
# avg_dcache2_power_cc1        0.0009 # avg power usage of dcache2_cc1
# avg_alu_power_cc1            2.7186 # avg power usage of alu_cc1
# avg_resultbus_power_cc1       1.4243 # avg power usage of resultbus_cc1
# avg_clock_power_cc1          8.3170 # avg power usage of clock_cc1
# fetch_stage_power_cc1  80027514.1572 # total power usage of fetch stage_cc1
# dispatch_stage_power_cc1 7164214.3304 # total power usage of dispatch stage_cc1
# issue_stage_power_cc1  232260001.2992 # total power usage of issue stage_cc1
# avg_fetch_power_cc1          2.7705 # average power of fetch unit per cycle_cc1
# avg_dispatch_power_cc1       0.2480 # average power of dispatch unit per cycle_cc1
# avg_issue_power_cc1          8.0408 # average power of issue unit per cycle_cc1
# total_power_cycle_cc1  617188381.2675 # total power per cycle_cc1
# avg_total_power_cycle_cc1      21.3668 # average total power per cycle_cc1
# avg_total_power_insn_cc1      14.3256 # average total power per insn_cc1
# rename_power_cc2       4501737.1903 # total power usage of rename unit_cc2
# bpred_power_cc2        19433121.8015 # total power usage of bpred unit_cc2
# window_power_cc2       33936661.5200 # total power usage of instruction window_cc2
# lsq_power_cc2          3852467.2324 # total power usage of lsq_cc2
# regfile_power_cc2      15142138.9098 # total power usage of arch. regfile_cc2
# icache_power_cc2       50999475.2832 # total power usage of icache_cc2
# dcache_power_cc2       49183051.2762 # total power usage of dcache_cc2
# dcache2_power_cc2        15958.3233 # total power usage of dcache2_cc2
# alu_power_cc2          44073066.4887 # total power usage of alu_cc2
# resultbus_power_cc2    23063347.1762 # total power usage of resultbus_cc2
# clock_power_cc2        154625457.2071 # total power usage of clock_cc2
# avg_rename_power_cc2         0.1558 # avg power usage of rename unit_cc2
# avg_bpred_power_cc2          0.6728 # avg power usage of bpred unit_cc2
# avg_window_power_cc2         1.1749 # avg power usage of instruction window_cc2
# avg_lsq_power_cc2            0.1334 # avg power usage of instruction lsq_cc2
# avg_regfile_power_cc2        0.5242 # avg power usage of arch. regfile_cc2
# avg_icache_power_cc2         1.7656 # avg power usage of icache_cc2
# avg_dcache_power_cc2         1.7027 # avg power usage of dcache_cc2
# avg_dcache2_power_cc2        0.0006 # avg power usage of dcache2_cc2
# avg_alu_power_cc2            1.5258 # avg power usage of alu_cc2
# avg_resultbus_power_cc2       0.7984 # avg power usage of resultbus_cc2
# avg_clock_power_cc2          5.3531 # avg power usage of clock_cc2
# fetch_stage_power_cc2  70432597.0847 # total power usage of fetch stage_cc2
# dispatch_stage_power_cc2 4501737.1903 # total power usage of dispatch stage_cc2
# issue_stage_power_cc2  154124552.0168 # total power usage of issue stage_cc2
# avg_fetch_power_cc2          2.4384 # average power of fetch unit per cycle_cc2
# avg_dispatch_power_cc2       0.1558 # average power of dispatch unit per cycle_cc2
# avg_issue_power_cc2          5.3357 # average power of issue unit per cycle_cc2
# total_power_cycle_cc2  398826482.4087 # total power per cycle_cc2
# avg_total_power_cycle_cc2      13.8072 # average total power per cycle_cc2
# avg_total_power_insn_cc2       9.2572 # average total power per insn_cc2
# rename_power_cc3       4992622.6911 # total power usage of rename unit_cc3
# bpred_power_cc3        29622173.2429 # total power usage of bpred unit_cc3
# window_power_cc3       35775982.7648 # total power usage of instruction window_cc3
# lsq_power_cc3          6058795.4520 # total power usage of lsq_cc3
# regfile_power_cc3      19225760.6839 # total power usage of arch. regfile_cc3
# icache_power_cc3       54064516.3489 # total power usage of icache_cc3
# dcache_power_cc3       60930181.9370 # total power usage of dcache_cc3
# dcache2_power_cc3      12221139.6694 # total power usage of dcache2_cc3
# alu_power_cc3          90932607.5311 # total power usage of alu_cc3
# resultbus_power_cc3    25518738.3810 # total power usage of resultbus_cc3
# clock_power_cc3        205870533.6348 # total power usage of clock_cc3
# avg_rename_power_cc3         0.1728 # avg power usage of rename unit_cc3
# avg_bpred_power_cc3          1.0255 # avg power usage of bpred unit_cc3
# avg_window_power_cc3         1.2386 # avg power usage of instruction window_cc3
# avg_lsq_power_cc3            0.2098 # avg power usage of instruction lsq_cc3
# avg_regfile_power_cc3        0.6656 # avg power usage of arch. regfile_cc3
# avg_icache_power_cc3         1.8717 # avg power usage of icache_cc3
# avg_dcache_power_cc3         2.1094 # avg power usage of dcache_cc3
# avg_dcache2_power_cc3        0.4231 # avg power usage of dcache2_cc3
# avg_alu_power_cc3            3.1481 # avg power usage of alu_cc3
# avg_resultbus_power_cc3       0.8834 # avg power usage of resultbus_cc3
# avg_clock_power_cc3          7.1272 # avg power usage of clock_cc3
# fetch_stage_power_cc3  83686689.5918 # total power usage of fetch stage_cc3
# dispatch_stage_power_cc3 4992622.6911 # total power usage of dispatch stage_cc3
# issue_stage_power_cc3  231437445.7353 # total power usage of issue stage_cc3
# avg_fetch_power_cc3          2.8972 # average power of fetch unit per cycle_cc3
# avg_dispatch_power_cc3       0.1728 # average power of dispatch unit per cycle_cc3
# avg_issue_power_cc3          8.0123 # average power of issue unit per cycle_cc3
# total_power_cycle_cc3  545213052.3370 # total power per cycle_cc3
# avg_total_power_cycle_cc3      18.8751 # average total power per cycle_cc3
# avg_total_power_insn_cc3      12.6550 # average total power per insn_cc3
# total_rename_access        43082382 # total number accesses of rename unit
# total_bpred_access          8592783 # total number accesses of bpred unit
# total_window_access       156414501 # total number accesses of instruction window
# total_lsq_access           16752193 # total number accesses of load/store queue
# total_regfile_access       55854879 # total number accesses of arch. regfile
# total_icache_access        45431185 # total number accesses of icache
# total_dcache_access        16015689 # total number accesses of dcache
# total_dcache2_access           7552 # total number accesses of dcache2
# total_alu_access           37829889 # total number accesses of alu
# total_resultbus_access     40822663 # total number accesses of resultbus
# avg_rename_access            1.4915 # avg number accesses of rename unit
# avg_bpred_access             0.2975 # avg number accesses of bpred unit
# avg_window_access            5.4150 # avg number accesses of instruction window
# avg_lsq_access               0.5800 # avg number accesses of lsq
# avg_regfile_access           1.9337 # avg number accesses of arch. regfile
# avg_icache_access            1.5728 # avg number accesses of icache
# avg_dcache_access            0.5545 # avg number accesses of dcache
# avg_dcache2_access           0.0003 # avg number accesses of dcache2
# avg_alu_access               1.3097 # avg number accesses of alu
# avg_resultbus_access         1.4133 # avg number accesses of resultbus
# max_rename_access                 4 # max number accesses of rename unit
# max_bpred_access                  4 # max number accesses of bpred unit
# max_window_access                16 # max number accesses of instruction window
# max_lsq_access                    5 # max number accesses of load/store queue
# max_regfile_access               11 # max number accesses of arch. regfile
# max_icache_access                 4 # max number accesses of icache
# max_dcache_access                 4 # max number accesses of dcache
# max_dcache2_access                5 # max number accesses of dcache2
# max_alu_access                    4 # max number accesses of alu
# max_resultbus_access              7 # max number accesses of resultbus
# max_cycle_power_cc1         41.6027 # maximum cycle power usage of cc1
# max_cycle_power_cc2         31.2028 # maximum cycle power usage of cc2
# max_cycle_power_cc3         34.4632 # maximum cycle power usage of cc3
# sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
# ld_text_base             0x00400000 # program text (code) segment base
# ld_text_size                  82768 # program text (code) size in bytes
# ld_data_base             0x10000000 # program initialized data segment base
# ld_data_size                   9092 # program init'ed `.data' and uninit'ed `.bss' size in bytes
# ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
# ld_stack_size                 16384 # program initial stack size
# ld_prog_entry            0x00400140 # program entry point (initial PC)
# ld_environ_base          0x7fff8000 # program environment base address address
# ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
# mem.page_count                   37 # total number of pages allocated
# mem.page_mem                   148k # total size of memory pages allocated
# mem.ptab_misses                  38 # total first level page table misses
# mem.ptab_accesses         312816557 # total page table accesses
# mem.ptab_miss_rate           0.0000 # first level page table miss rate

